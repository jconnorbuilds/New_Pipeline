name: Continuous Integration and Delivery

on: [push]

env:
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout main
        uses: actions/checkout@v3.2.0
      - 
        name: Add environment variables to .env.prod
        run: |
          echo "DEBUG=0" >> .env.prod
          echo "SQL_ENGINE=django.db.backends.postgresql" >> .env.prod
          echo "DATABASE=postgres" >> .env.prod
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.prod
          echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> .env.prod
          echo "SQL_USER=${{ secrets.SQL_USER }}" >> .env.prod
          echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> .env.prod
          echo "SQL_HOST=${{ secrets.SQL_HOST }}" >> .env.prod
          echo "SQL_PORT=${{ secrets.SQL_PORT }}" >> .env.prod
      - 
        name: Set environment variables
        run: |
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV
      - 
        name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - 
        name: Pull images
        run: |
          docker pull ${{ env.prod.WEB_IMAGE }} || true
          docker pull ${{ env.prod.NGINX_IMAGE }} || true
      - 
        name: Build images
        run: |
          docker compose -f docker-compose.prod.yml build
      - 
        name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}

  deploy:
    name: Deploy to Linode
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v3.2.0
      - name: Add environment variables to .env.prod
        run: |
          echo "DEBUG=0" >> .env.prod
          echo "SQL_ENGINE=django.db.backends.postgresql" >> .env.prod
          echo "DATABASE=postgres" >> .env.prod
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.prod
          echo "SQL_DATABASE=${{ secrets.SQL_DATABASE }}" >> .env.prod
          echo "SQL_USER=${{ secrets.SQL_USER }}" >> .env.prod
          echo "SQL_PASSWORD=${{ secrets.SQL_PASSWORD }}" >> .env.prod
          echo "SQL_HOST=${{ secrets.SQL_HOST }}" >> .env.prod
          echo "SQL_PORT=${{ secrets.SQL_PORT }}" >> .env.prod
          echo "WEB_IMAGE=${{ env.prod.WEB_IMAGE }}" >> .env.prod
          echo "NGINX_IMAGE=${{ env.prod.NGINX_IMAGE }}" >> .env.prod
          echo "NAMESPACE=${{ secrets.NAMESPACE }}" >> .env.prod
          echo "PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> .env.prod
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on Linode
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env.prod ./docker-compose.prod.yml root@${{ secrets.LINODE_IP_ADDRESS }}:/app
          ssh -o StrictHostKeyChecking=no root@${{ secrets.LINODE_IP_ADDRESS }} << 'ENDSSH'
            cd /app
            source .env.prod
            docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN
            docker pull $WEB_IMAGE
            docker pull $NGINX_IMAGE
            sudo docker-compose -f docker-compose.prod.yml up -d
          ENDSSH