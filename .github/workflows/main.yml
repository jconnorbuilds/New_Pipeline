name: New Pipline Tools Continuous Integration

on: [push]

env:
  WEB_IMAGE: "ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web"
  NGINX_IMAGE: "ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx"
  TAG: 'v1.38'

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v3.2.0
      - name: Add environment variables to .env
        run: |
          echo "TAG='${{ env.TAG }}'" >> .env
          echo "DEBUG=0" >> .env
          echo "DJANGO_ALLOWED_HOSTS='localhost 127.0.0.1 [::1] 139.162.72.231 .bwcat.tools'" >> .env
          echo "SQL_ENGINE=django.db.backends.postgresql" >> .env
          echo "DATABASE=postgres" >> .env
          echo "SECRET_KEY='${{ secrets.SECRET_KEY }}'" >> .env
          echo "SQL_DATABASE='${{ secrets.SQL_DATABASE }}'" >> .env
          echo "SQL_USER='${{ secrets.SQL_USER }}'" >> .env
          echo "SQL_PASSWORD='${{ secrets.SQL_PASSWORD }}'" >> .env
          echo "SQL_HOST='${{ secrets.SQL_HOST }}'" >> .env
          echo "SQL_PORT='${{ secrets.SQL_PORT }}'" >> .env
      - name: Set environment variables
        run: |
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV
          echo "TAG=$(echo ${{env.TAG}} )" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
      - name: Build images
        run: |
          docker compose -f docker-compose.ci.yml build
      - name: Tag images
        run: |
          docker tag pipeline_prod:latest ${{ env.WEB_IMAGE }}:${{ env.TAG }}
          docker tag pipeline_nginx_prod:latest ${{ env.NGINX_IMAGE }}:${{ env.TAG }}
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}:${{ env.TAG }}
          docker push ${{ env.NGINX_IMAGE }}:${{ env.TAG }}

  deploy:
    name: Deploy to Linode
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout main
        uses: actions/checkout@v3.2.0
      - name: Add environment variables to .env
        run: |
          echo "DEBUG='0'" >> .env
          echo "TAG='${{ env.TAG }}'" >> .env
          echo "SQL_ENGINE='django.db.backends.postgresql'" >> .env
          echo "DJANGO_ALLOWED_HOSTS='localhost 127.0.0.1 [::1] 139.162.72.231 .bwcat.tools'" >> .env
          echo "DATABASE='postgres'" >> .env
          echo "SECRET_KEY='${{ secrets.SECRET_KEY }}'" >> .env
          echo "SQL_DATABASE='${{ secrets.SQL_DATABASE }}'" >> .env
          echo "SQL_USER='${{ secrets.SQL_USER }}'" >> .env
          echo "SQL_PASSWORD='${{ secrets.SQL_PASSWORD }}'" >> .env
          echo "SQL_HOST='${{ secrets.SQL_HOST }}'" >> .env
          echo "SQL_PORT='${{ secrets.SQL_PORT }}'" >> .env
          echo "WEB_IMAGE='${{ env.WEB_IMAGE }}'" >> .env
          echo "NGINX_IMAGE='${{ env.NGINX_IMAGE }}'" >> .env
          echo "NAMESPACE='${{ secrets.NAMESPACE }}'" >> .env
          echo "PERSONAL_ACCESS_TOKEN='${{ secrets.PERSONAL_ACCESS_TOKEN }}'" >> .env
          echo "AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'" >> .env
          echo "AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'" >> .env
          echo "DROPBOX_REFRESH_TOKEN='${{ secrets.DROPBOX_REFRESH_TOKEN }}'" >> .env
          echo "DROPBOX_APP_KEY='${{ secrets.DROPBOX_APP_KEY }}'" >> .env
          echo "DROPBOX_APP_SECRET='${{ secrets.DROPBOX_APP_SECRET }}'" >> .env
          echo "DROPBOX_USER_ID='${{ secrets.DROPBOX_USER_ID }}'" >> .env
          echo "ENDPOINT_URL='${{ secrets.ENDPOINT_URL }}'" >> .env
          echo "EMAIL_HOST_PASSWORD='${{ secrets.EMAIL_HOST_PASSWORD }}'" >> .env
          echo "WISE_API_KEY='${{ secrets.WISE_API_KEY }}'" >> .env
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on Linode
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml root@${{ secrets.LINODE_IP_ADDRESS }}:/app
          ssh -o StrictHostKeyChecking=no root@${{ secrets.LINODE_IP_ADDRESS }} << 'ENDSSH'
            cd /app
            source .env
            docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN
            docker pull $WEB_IMAGE
            docker pull $NGINX_IMAGE
            sudo docker compose -f docker-compose.prod.yml up -d
          ENDSSH
